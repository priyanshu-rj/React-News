{"ast":null,"code":"var _jsxFileName = \"E:\\\\API-React\\\\api\\\\src\\\\Story.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Story = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState('');\n  const API = \"http://hn.algolia.com/api/v1/search?query=\";\n  const fetchApiData = async () => {\n    setIsLoading(true);\n    const res = await fetch(API + query);\n    const data = JSON.parse(await res.text());\n    setIsLoading(false);\n    setData(data.hits);\n  };\n  useEffect(() => {\n    fetchApiData();\n  }, [query]);\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n  const handleSearchClick = () => {\n    fetchApiData();\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchClick,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), data.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.title\n      }, item.objectID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true);\n};\n_s(Story, \"cGSVEtDAQVneWSRLVa/dOr07NYM=\");\n_c = Story;\nexport default Story;\nvar _c;\n$RefreshReg$(_c, \"Story\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Story","_s","data","setData","isLoading","setIsLoading","query","setQuery","API","fetchApiData","res","fetch","JSON","parse","text","hits","handleInputChange","event","target","value","handleSearchClick","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","map","item","title","objectID","_c","$RefreshReg$"],"sources":["E:/API-React/api/src/Story.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Story = () => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [query, setQuery] = useState('');\r\n  const API =\"http://hn.algolia.com/api/v1/search?query=\";\r\n\r\n  const fetchApiData = async () => {\r\n    setIsLoading(true);\r\n    const res = await fetch(API + query);\r\n    const data = JSON.parse(await res.text());\r\n    setIsLoading(false);\r\n    setData(data.hits);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchApiData();\r\n  }, [query]);\r\n\r\n  const handleInputChange = (event) => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  const handleSearchClick = () => {\r\n    fetchApiData();\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <>\r\n        <h1>Loading...</h1>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <input type=\"text\" value={query} onChange={handleInputChange} />\r\n        <button onClick={handleSearchClick}>Search</button>\r\n      </div>\r\n      {data.map((item) => {\r\n        return (\r\n          <li key={item.objectID}>{item.title}</li>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Story;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMa,GAAG,GAAE,4CAA4C;EAEvD,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BJ,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,GAAGF,KAAK,CAAC;IACpC,MAAMJ,IAAI,GAAGU,IAAI,CAACC,KAAK,CAAC,MAAMH,GAAG,CAACI,IAAI,EAAE,CAAC;IACzCT,YAAY,CAAC,KAAK,CAAC;IACnBF,OAAO,CAACD,IAAI,CAACa,IAAI,CAAC;EACpB,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACde,YAAY,EAAE;EAChB,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;EAEX,MAAMU,iBAAiB,GAAIC,KAAK,IAAK;IACnCV,QAAQ,CAACU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BX,YAAY,EAAE;EAChB,CAAC;EAED,IAAIL,SAAS,EAAE;IACb,oBACEP,OAAA,CAAAE,SAAA;MAAAsB,QAAA,eACExB,OAAA;QAAAwB,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK,iBAClB;EAEP;EAEA,oBACE5B,OAAA,CAAAE,SAAA;IAAAsB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,gBACExB,OAAA;QAAO6B,IAAI,EAAC,MAAM;QAACP,KAAK,EAAEb,KAAM;QAACqB,QAAQ,EAAEX;MAAkB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAChE5B,OAAA;QAAQ+B,OAAO,EAAER,iBAAkB;QAAAC,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC/C,EACLvB,IAAI,CAAC2B,GAAG,CAAEC,IAAI,IAAK;MAClB,oBACEjC,OAAA;QAAAwB,QAAA,EAAyBS,IAAI,CAACC;MAAK,GAA1BD,IAAI,CAACE,QAAQ;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAmB;IAE7C,CAAC,CAAC;EAAA,gBACD;AAEP,CAAC;AAACxB,EAAA,CA/CID,KAAK;AAAAiC,EAAA,GAALjC,KAAK;AAiDX,eAAeA,KAAK;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}